 Using DynamoDB for configuration storage is a good choice for flexibility and scalability. Let's design a schema for storing your data retrieval configurations. We'll create a single table to store all configurations, using a composite key to differentiate between different types of configurations.

Here's a proposed structure for your DynamoDB table:

Table Name: DataRetrievalConfigs

Attributes:
1. ConfigId (Partition Key): String - Unique identifier for each configuration
2. ConfigType (Sort Key): String - Type of configuration (e.g., "TABLE", "COLUMN", "JOIN", "FILTER")
3. TableName: String - Name of the table (for TABLE type)
4. Columns: List - List of column names (for COLUMN type)
5. JoinCondition: Map - Join details (for JOIN type)
6. FilterCondition: String - Filter condition (for FILTER type)
7. Description: String - Optional description of the configuration
8. LastUpdated: Timestamp - Last update time

Example items in the table:

1. Table Configuration:
```
{
  "ConfigId": "SALES_DATA",
  "ConfigType": "TABLE",
  "TableName": "sales_transactions",
  "Description": "Main sales data table",
  "LastUpdated": "2024-07-23T10:00:00Z"
}
```

2. Column Configuration:
```
{
  "ConfigId": "SALES_DATA",
  "ConfigType": "COLUMN",
  "Columns": ["transaction_id", "customer_id", "product_id", "sale_amount", "sale_date"],
  "Description": "Columns for sales data retrieval",
  "LastUpdated": "2024-07-23T10:05:00Z"
}
```

3. Join Configuration:
```
{
  "ConfigId": "SALES_DATA",
  "ConfigType": "JOIN",
  "JoinCondition": {
    "type": "INNER",
    "table": "customers",
    "on": "sales_transactions.customer_id = customers.id"
  },
  "Description": "Join condition for customer details",
  "LastUpdated": "2024-07-23T10:10:00Z"
}
```

4. Filter Configuration:
```
{
  "ConfigId": "SALES_DATA",
  "ConfigType": "FILTER",
  "FilterCondition": "sale_date >= :start_date AND sale_amount > :min_amount",
  "Description": "Filter for recent high-value sales",
  "LastUpdated": "2024-07-23T10:15:00Z"
}
```

This structure allows you to:
1. Store multiple configurations for different data retrieval scenarios
2. Easily update individual components (table, columns, joins, filters) without affecting others
3. Retrieve all components of a configuration using the same ConfigId
4. Add new configuration types in the future if needed

To use this in your application:

1. Create functions to read and write these configurations to DynamoDB
2. In your Query Builder, fetch all components with the same ConfigId
3. Construct your SQL query using the fetched configuration components
4. For ad-hoc requests, allow users to specify the ConfigId or create temporary configurations

This design provides flexibility for both automated and ad-hoc requests while keeping the configuration management centralized and easily updatable.
