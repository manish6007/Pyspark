To write an AWS Glue job to access Amazon Redshift data from another account, you need to set up a few components. Here's a step-by-step guide, including the Glue job script.

### Prerequisites

1. **AWS Accounts Setup**:
   - Account A (where Redshift is hosted)
   - Account B (where Glue is hosted)

2. **Networking**:
   - Ensure that the Redshift cluster in Account A is accessible from the Glue job in Account B. This may involve VPC peering, security groups, and subnet configurations.

3. **IAM Roles and Policies**:
   - Create an IAM role in Account B with permissions to access AWS Glue and S3.
   - In Account A, create an IAM role that allows Redshift access and grant permissions for Account B to assume this role.

4. **Redshift Cluster**:
   - Ensure that the Redshift cluster is properly configured to accept connections.

### Step-by-Step Guide

#### 1. Create IAM Role in Account A (Redshift)

Create a role that allows Redshift access and allows Account B to assume this role. Attach a policy like the following:

```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::ACCOUNT_B_ID:role/GlueAccessRole"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
```

Attach the necessary policies to this role to allow access to the Redshift cluster.

#### 2. Create IAM Role in Account B (Glue)

Create a role in Account B that AWS Glue can use. Attach a policy that grants necessary permissions for AWS Glue and S3 access:

```json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "glue:*",
                "s3:*"
            ],
            "Resource": "*"
        }
    ]
}
```

#### 3. AWS Glue Job Script

Here's an example AWS Glue job script that connects to the Redshift cluster in Account A and fetches data:

```python
import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

args = getResolvedOptions(sys.argv, ['JOB_NAME', 'REDSHIFT_CLUSTER_ID', 'REDSHIFT_DB_NAME', 'REDSHIFT_USER', 'REDSHIFT_PASSWORD', 'ROLE_ARN'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Define the Redshift connection options
redshift_options = {
    "url": f"jdbc:redshift://{args['REDSHIFT_CLUSTER_ID']}.redshift.amazonaws.com:5439/{args['REDSHIFT_DB_NAME']}",
    "dbtable": "your_table_name",
    "user": args['REDSHIFT_USER'],
    "password": args['REDSHIFT_PASSWORD'],
    "redshiftTmpDir": "s3://your-temp-dir/",
    "aws_iam_role": args['ROLE_ARN']
}

# Read data from Redshift
dynamic_frame = glueContext.create_dynamic_frame.from_options(
    connection_type="redshift",
    connection_options=redshift_options
)

# Convert the DynamicFrame to a DataFrame
data_frame = dynamic_frame.toDF()

# Process the data (example)
data_frame.show()

# Write data back to S3 or another destination
data_frame.write.format("csv").option("header", "true").save("s3://your-output-bucket/output/")

job.commit()
```

#### 4. Set Up and Run the Glue Job

1. **Create an AWS Glue Job**:
   - Go to the AWS Glue console in Account B.
   - Create a new job and configure it to use the IAM role you created in Account B.

2. **Set Job Parameters**:
   - `JOB_NAME`: The name of the Glue job.
   - `REDSHIFT_CLUSTER_ID`: The Redshift cluster identifier in Account A.
   - `REDSHIFT_DB_NAME`: The Redshift database name.
   - `REDSHIFT_USER`: The Redshift database user.
   - `REDSHIFT_PASSWORD`: The Redshift database password.
   - `ROLE_ARN`: The ARN of the role in Account A that allows Redshift access.

3. **Run the Glue Job**:
   - Start the Glue job from the AWS Glue console.
   - Monitor the job to ensure it completes successfully and verify that data is fetched and stored as expected.

This setup ensures secure cross-account access, leveraging IAM roles and Glue's capabilities to fetch data from Redshift and process it accordingly.
